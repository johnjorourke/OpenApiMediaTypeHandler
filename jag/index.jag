<%
/*
 * Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

require('/modules/store.js').exec(function (ctx) {
    response.characterEncoding = 'UTF-8';//fix for character encoding
    var assetManager = function (session, type) {
        var options = {'type': type};
        var tenantResources = tenantApi.createTenantAwareAssetResources(session, options);
        return tenantResources.am;
    };

    var tenantApi = require('/modules/tenant-api.js').api;
    var server = require('store').server;
    var carbon = require('carbon');
    var config = require('/config/store.js').config();
    var permissionAPI = require('rxt').permissions;
    var appAPI = require('rxt').app;
    var APP_CONTEXT = appAPI.getContext();
    var printAppContext = function(){
      print(APP_CONTEXT);
    };

    var ByteArrayInputStream = Packages.java.io.ByteArrayInputStream,
            commonConstants = Packages.org.wso2.carbon.registry.extensions.utils.CommonConstants;
    var jsonValue;
    var path = ctx.params.path;
    var tenantId = ctx.tenant.tenantId;

    if (Boolean(path)) {
        var am = assetManager(session, type);
        var registry = am.registry.registry;

        var resource;
        if (registry.resourceExists(path)) {
            resource = registry.get(path);
        }

        var content = resource.getContent();
        var value = '' + new Stream(new ByteArrayInputStream(content));
        jsonValue = parse(value);
        var url = config.server.https;

        if (commonConstants.SWAGGER_MEDIA_TYPE.equals(resource.getMediaType())) {
            /*log.info("wrong content type");
             response.status = 400;
             print("swagger UI generation is only avaialable for swagger artifacts," +
             " Please specify a registry path of a swagger artifact!");
             return;*/

            childAPIs = {};
            childAPIs.baseCollection = resource.path.substr(0, resource.path.lastIndexOf("/"));
            // if swagger content version not equlas to 2.0
            if (!(jsonValue.swagger && parseInt(jsonValue.swagger) === 2) && !(jsonValue.openapi)) {
                var i;
                for (i = 0; i < jsonValue.apis.length; i++) {
                    var api = jsonValue.apis[i];
                    // see if this is a single-file swagger definition
                    if (!Array.isArray(api.operations)) {
                        var childResourcePath = childAPIs.baseCollection + api.path;
                        var authStatus = permissionAPI.checkActionPermissionforPath(childResourcePath,'read', tenantId,user);
                        var childResource,childResourceContent,childResourceContentvalue;
                        if (authStatus) {
                            childResource = registry.get(childResourcePath);
                            childResourceContent = childResource.getContent();
                            childResourceContentvalue = '' + new Stream(new ByteArrayInputStream(childResourceContent));
                            childAPIs[api.path] = parse(childResourceContentvalue);
                        }
                    }
                }
            }
        }
    }
    else {
        jsonValue = require('../data/swagger.json');
    }

    %>

    <html>
        <head>
          <title>Swagger UI</title>
          <link rel="icon" type="image/png" href="../extensions/app/greg_openapi/swagger-ui/favicon-32x32.png" sizes="32x32" />
          <link rel="icon" type="image/png" href="../extensions/app/greg_openapi/swagger-ui/favicon-16x16.png" sizes="16x16" />
          <link href='<%printAppContext();%>/extensions/app/greg_openapi/swagger-ui/swagger-ui.css' media='screen' rel='stylesheet' type='text/css'/>
    <style>
      html
      {
        box-sizing: border-box;
        overflow: -moz-scrollbars-vertical;
        overflow-y: scroll;
      }

      *,
      *:before,
      *:after
      {
        box-sizing: inherit;
      }

      body
      {
        margin:0;
        background: #fafafa;
      }
    </style>		  

          <!-- CSRF fix -->
          <script src="<%=APP_CONTEXT%>/csrf.js" type="text/javascript"></script>

 

               </head>
                   <body class="swagger-section">
				   <div id="swagger-ui"></div>

         <script src='<%printAppContext();%>/extensions/app/greg_openapi/swagger-ui/swagger-ui-bundle.js' type='text/javascript'></script>
		  <script src='<%printAppContext();%>/extensions/app/greg_openapi/swagger-ui/swagger-ui-standalone-preset.js' type='text/javascript'></script>
				   
				   xxx
				   <script>
				       window.onload = function() {
      // Begin Swagger UI call region
      const ui = SwaggerUIBundle({        
		spec: <%= jsonValue %>,
        dom_id: '#swagger-ui',
        deepLinking: true,
        presets: [
          SwaggerUIBundle.presets.apis
        ],
        plugins: [
          SwaggerUIBundle.plugins.DownloadUrl
        ]
      })
      // End Swagger UI call region

      window.ui = ui
    }
</script>
                       <!--Header div was removed to disable swagger file loading over network-->
                       <!--<div id='header'>
                         <div class="swagger-ui-wrap">
                           <a id="logo" href="http://swagger.io">swagger</a>
                           <form id='api_selector'>
                             <div class='input'><input placeholder="http://example.com/api" id="input_baseUrl" name="baseUrl" type="text"/></div>
                             <div class='input'><input placeholder="api_key" id="input_apiKey" name="apiKey" type="text"/></div>
                             <div class='input'><a id="explore" href="#">Explore</a></div>
                           </form>
                         </div>
                       </div>-->

                       <!-- <div id="message-bar" class="swagger-ui-wrap">&nbsp;</div>
                       <div id="swagger-ui-container" class="swagger-ui-wrap"></div> -->
                   </body>
           </html>

<% }, request, response, session); %>
